
#PASTOR: Code generated by XML::Pastor/1.0.4 at 'Sat Dec  1 23:13:04 2012'

use utf8;
use strict;
use warnings;
no warnings qw(uninitialized);

use XML::Pastor;



#================================================================

package XML::Pastor::Test::Type::City;

use XML::Pastor::Test::Type::Code;
use XML::Pastor::Test::Type::Population;
use XML::Pastor::Test::population;

our @ISA=qw(XML::Pastor::ComplexType);

XML::Pastor::Test::Type::City->mk_accessors( qw(_code name population));

# Attribute accessor aliases

sub code { &_code; }

XML::Pastor::Test::Type::City->XmlSchemaType( bless( {
         'attributeInfo' => {
                              'code' => bless( {
                                               'class' => 'XML::Pastor::Test::Type::Code',
                                               'metaClass' => 'XML::Pastor::Test::Pastor::Meta',
                                               'name' => 'code',
                                               'scope' => 'local',
                                               'targetNamespace' => 'http://www.example.com/country',
                                               'type' => 'Code|http://www.example.com/country',
                                               'use' => 'required'
                                             }, 'XML::Pastor::Schema::Attribute' )
                            },
         'attributePrefix' => '_',
         'attributes' => [
                           'code'
                         ],
         'baseClasses' => [
                            'XML::Pastor::ComplexType'
                          ],
         'class' => 'XML::Pastor::Test::Type::City',
         'contentType' => 'complex',
         'elementInfo' => {
                            'name' => bless( {
                                             'class' => 'XML::Pastor::Builtin::string',
                                             'metaClass' => 'XML::Pastor::Test::Pastor::Meta',
                                             'minOccurs' => '0',
                                             'name' => 'name',
                                             'scope' => 'local',
                                             'targetNamespace' => 'http://www.example.com/country',
                                             'type' => 'string|http://www.w3.org/2001/XMLSchema'
                                           }, 'XML::Pastor::Schema::Element' ),
                            'population' => bless( {
                                                   'class' => 'XML::Pastor::Test::Type::Population',
                                                   'definition' => bless( {
                                                                            'baseClasses' => [
                                                                                               'XML::Pastor::Test::Type::Population',
                                                                                               'XML::Pastor::Element'
                                                                                             ],
                                                                            'class' => 'XML::Pastor::Test::population',
                                                                            'isRedefinable' => 1,
                                                                            'metaClass' => 'XML::Pastor::Test::Pastor::Meta',
                                                                            'name' => 'population',
                                                                            'scope' => 'global',
                                                                            'targetNamespace' => 'http://www.example.com/country',
                                                                            'type' => 'Population|http://www.example.com/country'
                                                                          }, 'XML::Pastor::Schema::Element' ),
                                                   'metaClass' => 'XML::Pastor::Test::Pastor::Meta',
                                                   'minOccurs' => '0',
                                                   'name' => 'population',
                                                   'nameIsAutoGenerated' => 1,
                                                   'ref' => 'population|http://www.example.com/country',
                                                   'scope' => 'local',
                                                   'targetNamespace' => 'http://www.example.com/country'
                                                 }, 'XML::Pastor::Schema::Element' )
                          },
         'elements' => [
                         'name',
                         'population'
                       ],
         'isRedefinable' => 1,
         'metaClass' => 'XML::Pastor::Test::Pastor::Meta',
         'name' => 'City',
         'scope' => 'global',
         'targetNamespace' => 'http://www.example.com/country'
       }, 'XML::Pastor::Schema::ComplexType' ) );

1;


__END__



=head1 NAME

B<XML::Pastor::Test::Type::City>  -  A class generated by L<XML::Pastor> . 


=head1 ISA

This class descends from L<XML::Pastor::ComplexType>.


=head1 CODE GENERATION

This module was automatically generated by L<XML::Pastor> version 1.0.4 at 'Sat Dec  1 23:13:04 2012'


=head1 ATTRIBUTE ACCESSORS

=over

=item B<_code>(), B<code>()      - See L<XML::Pastor::Test::Type::Code>.

=back


=head1 CHILD ELEMENT ACCESSORS

=over

=item B<name>()      - See L<XML::Pastor::Builtin::string>.

=item B<population>()      - See L<XML::Pastor::Test::Type::Population>.

=back


=head1 SEE ALSO

L<XML::Pastor::ComplexType>, L<XML::Pastor>, L<XML::Pastor::Type>, L<XML::Pastor::ComplexType>, L<XML::Pastor::SimpleType>


=cut
